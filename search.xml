<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pandas：读入csv 输出csv</title>
    <url>/2020/ck50s96m300003os06kui0kx5/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">pd.set_option(&#39;expand_frame_repr&#39;, False)  # 当列太多时不换行</span><br><span class="line"></span><br><span class="line"># csv的读入</span><br><span class="line">path &#x3D; r&#39;C:\Users\Administrator\Desktop\1day数据.csv&#39;  # 加入r 使保留原始</span><br><span class="line"># path &#x3D; &#39;C:&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;1day数据.csv&#39; #正斜杠</span><br><span class="line"># path &#x3D; &#39;C:\\Users\\Administrator\\Desktop\\1day数据.csv&#39; #双斜杠 因为\有转义的意思 \t &#x3D;&#x3D; tab</span><br><span class="line"></span><br><span class="line"># df &#x3D; pd.read_csv(filepath_or_buffer&#x3D; path) # 这样读入是不行的。index 是0 1 2 3</span><br><span class="line">df &#x3D; pd.read_csv(filepath_or_buffer&#x3D;path, index_col&#x3D;[&#39;candle_begin_time_GMT8&#39;])</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"># 关于读入程序  几个参数</span><br><span class="line">df &#x3D; pd.read_csv(filepath_or_buffer&#x3D; path,</span><br><span class="line">                 sep&#x3D;&#39;,&#39;,  #csv默认是逗号 如果是|分割的文件 那么也可以用|来读入</span><br><span class="line">                 skiprows&#x3D;0, # 一行也不跳过</span><br><span class="line">                 nrows&#x3D;15, # 我只读前15行数据</span><br><span class="line">                 parse_dates&#x3D;[&#39;candle_begin_time_GMT8&#39;] ,# parse:语法分析  对列名按时间读入 不按string读入。 [&#39;列名&#39;，&#39;列名&#39;]</span><br><span class="line">                 index_col&#x3D;[&#39;candle_begin_time_GMT8&#39;] ,# 谁是index，若不指定 index是0 1 2 3</span><br><span class="line">                 usecols&#x3D;[&#39;candle_begin_time_GMT8&#39;,[&#39;close&#39;]], # 指定只用这些列，如果不加这个参数 全读取</span><br><span class="line">                 error_bad_lines&#x3D;False, # 原本是7列，但这一行有8列 是不规整的脏数据，那么跳过，否则出错，pandas不知道如何处理</span><br><span class="line">                 na_values&#x3D;&#39;NULL&#39; #我csv里面有NULL值，我希望pandas把我csv里面的NULL识别成空值而不是string</span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">df.to_csv(&#39;output.csv&#39;, index&#x3D;False) # 输出的时候index输不输出</span><br><span class="line">df.to_csv(&#39;C:&#x2F;Users&#x2F;think&#x2F;Desktop&#x2F;Result.csv&#39;,sep&#x3D;&#39;?&#39;)  # 分隔符</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>量化交易</tag>
        <tag>pandas</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas：行列操作、定位数据</title>
    <url>/2020/ck50s53h100044os0a12b7qag/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">pd.set_option(&#39;expand_frame_repr&#39;, False)  # 当列太多时不换行</span><br><span class="line"></span><br><span class="line">path &#x3D; r&#39;C:\Users\Administrator\Desktop\1min数据.csv&#39;  # 加入r 使保留原始</span><br><span class="line">df &#x3D; pd.read_csv(filepath_or_buffer&#x3D;path, index_col&#x3D;[&#39;candle_begin_time_GMT8&#39;], parse_dates&#x3D;[&#39;candle_begin_time_GMT8&#39;])</span><br><span class="line"></span><br><span class="line"># 行index  列 colums ，简单介绍</span><br><span class="line"></span><br><span class="line"># print(df.columns)  # 列</span><br><span class="line"># print(df.index) # 行</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Index([&#39;open&#39;, &#39;high&#39;, &#39;low&#39;, &#39;close&#39;, &#39;volume&#39;], dtype&#x3D;&#39;object&#39;)</span><br><span class="line">Index([&#39;2019-06-14&#39;, &#39;2019-06-15&#39;, &#39;2019-06-16&#39;, &#39;2019-06-17&#39;, &#39;2019-06-18&#39;,</span><br><span class="line">       ...</span><br><span class="line">       &#39;2019-12-26&#39;, &#39;2019-12-27&#39;, &#39;2019-12-28&#39;, &#39;2019-12-29&#39;, &#39;2019-12-30&#39;],</span><br><span class="line">      dtype&#x3D;&#39;object&#39;, name&#x3D;&#39;candle_begin_time_GMT8&#39;, length&#x3D;200)</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 重要：如何选取指定的行、列（列直接df[&#39;open&#39;] ， 行用df.loc[&#39;2020-1-1&#39;]）</span><br><span class="line"></span><br><span class="line"># 列操作： df[  [list] ]    # [list] &#x3D;&#x3D; [&#39;column&#39;,&#39;column&#39;]</span><br><span class="line"># print(df[&#39;open&#39;])  # 根据列名称来选取，读取的数据是Series类型  df[&#39;string&#39;]</span><br><span class="line"># print(df[[&#39;high&#39;, &#39;close&#39;]])  # 同时选取多列，注意：需要两个括号，读取的数据是DataFrame类型</span><br><span class="line"></span><br><span class="line"># 行操作： df.loc[&#39;行index&#39;]</span><br><span class="line"># loc操作：通过label（columns和index的名字）来读取数据</span><br><span class="line"># print(df.loc[&#39;2019-12-30 16:55:00&#39;])  # 选取指定的某一行，输出的数据是Series类型</span><br><span class="line"># print(df.loc[&#39;2019&#x2F;12&#x2F;30 16:55:00&#39;])  # 意外发现：如果设置了读入的时候 按时间来存储index，那么2019&#x2F;6&#x2F;14 2019-6-14都可以</span><br><span class="line"># print(df.loc[[&#39;2018-01-24 00:01:00&#39;, &#39;2018-01-24 00:04:00&#39;]])  # 选取指定的两行，同样不能df[&#39;a&#39;,&#39;b&#39;]   需要df[[&#39;abc&#39;,&#39;def&#39;]]</span><br><span class="line"></span><br><span class="line"># 行操作：这里就不需要嵌套。。。</span><br><span class="line"># print(df.loc[&#39;2019-12-30 13:36:00&#39;: &#39;2019-12-30 13:54:00&#39;])  # 选取在此范围内的多行，和在list中slice操作类似，读取的数据是DataFrame类型</span><br><span class="line"># print(df.loc[:]) # 全输出</span><br><span class="line"># print(df.loc[:, &#39;open&#39;:&#39;close&#39;])  # 选取在此范围内的多列，读取的数据是DataFrame类型</span><br><span class="line"># print(df.loc[&#39;2018-01-24 00:01:00&#39;: &#39;2018-01-24 00:05:00&#39;, &#39;open&#39;:&#39;close&#39;])  # 读取指定的多行、多列。逗号之前是行的范围，逗号之后是列的范围。读取的数据是DataFrame类型</span><br><span class="line"># print(df.loc[:, :])  # 读取所有行、所有列，读取的数据是DataFrame类型</span><br><span class="line"># print(df.at[&#39;2018-01-24 00:01:00&#39;, &#39;open&#39;])  # 使用at读取指定的某个元素。loc也行，但是at更高效。</span><br><span class="line"></span><br><span class="line"># iloc操作：通过position来读取数据</span><br><span class="line"># print(df.iloc[0])  # 以index选取某一行，读取的数据是Series类型</span><br><span class="line"># print(df.iloc[1:3])  # 选取在此范围内的多行，读取的数据是DataFrame类型</span><br><span class="line"># print(df.iloc[:, 1:3])  # 选取在此范围内的多列，读取的数据是DataFrame类型</span><br><span class="line"># print(df.iloc[1:3, 1:3])  # 读取指定的多行、多列，读取的数据是DataFrame类型</span><br><span class="line"># print(df.iloc[:, :])  # 读取所有行、所有列，读取的数据是DataFrame类型</span><br><span class="line"># print(df.iat[1, 1])  # 使用iat读取指定的某个元素。使用iloc也行，但是iat更高效。</span><br><span class="line"></span><br><span class="line"># 列操作</span><br><span class="line"># 行列加减乘除</span><br><span class="line"># print(df[&#39;volume&#39;] + 99999)  # int 后面加int,字符串列可以直接加上字符串，对整列进行操作</span><br><span class="line"># print(df[&#39;close&#39;] * 100)  # 数字列直接加上或者乘以数字，对整列进行操作。</span><br><span class="line"># print(df[[&#39;close&#39;, &#39;volume&#39;]])  # 输出结果作为对比，与上面没有任何改变 如同print（a+5 ） print（a）</span><br><span class="line"># print(df[&#39;close&#39;] * df[&#39;volume&#39;])  # 两列之间可以直接操作。</span><br><span class="line"></span><br><span class="line"># 新增一列</span><br><span class="line"># df[&#39;my_position&#39;] &#x3D; df[&#39;close&#39;] * 0.1</span><br><span class="line"># df[&#39;交易所&#39;] &#x3D; &#39;okex&#39;</span><br><span class="line"># df.drop(&#39;volume&#39;,axis&#x3D;1,inplace&#x3D;True) #删除一列，axis：轴</span><br><span class="line"># del df[&#39;volume&#39;]  # 删除某一列的方法</span><br><span class="line"># print(df)</span><br><span class="line"></span><br><span class="line"># 对列的统计函数</span><br><span class="line"># print(df[&#39;close&#39;].mean())  # 求一整列的均值，返回一个数。会自动排除空值。</span><br><span class="line"># print(df[[&#39;close&#39;, &#39;volume&#39;]].mean())  # 求两列的均值，返回两个数，Series # 没有加axis &#x3D; 1 ：对第一列求均值得数1，对第二列求均值得数2</span><br><span class="line"># print(df[[&#39;close&#39;, &#39;volume&#39;]])</span><br><span class="line"># print(df[[&#39;close&#39;, &#39;volume&#39;]].mean(axis&#x3D;1))  # 求两列的均值，返回DataFrame。axis&#x3D;0或者1要搞清楚。（其实不是很懂）</span><br><span class="line"># 用close和opne 对行计算mean()，得。</span><br><span class="line"># axis&#x3D;1，axis&#x3D;0（默认）   谁代表对整几列进行操作，谁代表对几行进行操作。提示：试一下就知道了</span><br><span class="line"></span><br><span class="line"># print(df[&#39;high&#39;].max())  # 最大值</span><br><span class="line"># print(df[&#39;low&#39;].min())  # 最小值</span><br><span class="line"># print(df[&#39;close&#39;].std())  # 标准差</span><br><span class="line"># print(df[&#39;close&#39;].count())  # 非空的数据的数量</span><br><span class="line"># print(df[&#39;close&#39;].median())  # 中位数</span><br><span class="line"># print(df[&#39;close&#39;].quantile(0.25))  # 25%分位数</span><br><span class="line"># 还有其他的函数计算其他的指标，在实际使用中遇到可以自己搜索</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># shift类函数</span><br><span class="line"># df[&#39;上周期close&#39;] &#x3D; df[&#39;close&#39;].shift(1)  # 读取上一行的数据，若参数设定为3，就是读取上三行的数据；若参数设定为-1，就是读取下一行的数据；</span><br><span class="line"># 我的df[&#39;new&#39;] &#x3D; df[&#39;close&#39;],完全把一列赋值了；但是我要上周期的close，那么 df[&#39;new&#39;] &#x3D; df[&#39;close&#39;].shifr(1)</span><br><span class="line"># del df[&#39;volume&#39;]  # 删除某一列的方法</span><br><span class="line"># print(df)</span><br><span class="line"></span><br><span class="line"># df[&#39;涨跌&#39;] &#x3D; df[&#39;close&#39;].diff(1)  # 【本行数据】和【上一行数据】相减得到的值  # different不同？</span><br><span class="line"># print(df[[&#39;close&#39;, &#39;涨跌&#39;]])</span><br><span class="line"># df.drop([&#39;涨跌&#39;], axis&#x3D;1, inplace&#x3D;True)  # 删除某一列的另外一种方式，inplace参数指是否替代原来的df</span><br><span class="line"></span><br><span class="line"># df[&#39;涨跌幅&#39;] &#x3D; df[&#39;close&#39;].pct_change(1)  # 类似于diff，但是求的是两个数直接的比例，相当于求涨跌幅</span><br><span class="line"># print(df[[&#39;close&#39;,&#39;涨跌&#39;,&#39;涨跌幅&#39;]])</span><br><span class="line"></span><br><span class="line"># cum(cumulative)计算类函数</span><br><span class="line"># df[&#39;volume_cum&#39;] &#x3D; df[&#39;volume&#39;].cumsum()  # 该列的累加值</span><br><span class="line"># print(df[[&#39;volume&#39;, &#39;volume_cum&#39;]])</span><br><span class="line"># print((df[&#39;涨跌幅&#39;] + 1.0).cumprod())  # 该列的累乘值，此处计算的就是资金曲线，假设初始1元钱。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 其他列函数</span><br><span class="line"># df[&#39;close_排名&#39;] &#x3D; df[&#39;close&#39;].rank(ascending&#x3D;True, pct&#x3D;False)  # 输出排名。ascending参数代表是顺序还是逆序 上升。pct参数代表输出的是排名还是排名比例</span><br><span class="line"># print(df[[&#39;close&#39;, &#39;close_排名&#39;]])</span><br><span class="line"># del df[&#39;close_排名&#39;]</span><br><span class="line"># print(df[&#39;close&#39;].value_counts())  # 计数。统计该列中每个元素出现的次数。返回的数据是Series</span><br><span class="line"></span><br><span class="line"># 筛选操作，根据指定的条件，筛选出相关的数据。</span><br><span class="line"># print(df)</span><br><span class="line"># print(df[&#39;open&#39;] &gt; 7370)  #  判断open等于7370  输出的是series，是True、False。 如果是string:判断symbol是否等于BTCUSD</span><br><span class="line"># print(df[df[&#39;open&#39;] &gt; 7500])  # 将判断为True的输出</span><br><span class="line"># print(df[df[&#39;open&#39;] &gt; 7370].index)  # 输出判断为True的行的index</span><br><span class="line"># print(df[df[&#39;symbol&#39;].isin([&#39;BTCUSD&#39;, &#39;LTCUSD&#39;, &#39;ETHUSD&#39;])])  # 选取代码等于&#39;BTCUSD&#39;或&#39;LTCUSD &#39;或&#39;ETHUSD&#39;的行</span><br><span class="line"># print(df[df[&#39;close&#39;] &lt; 10.0])  # 选取收盘价小于10的行</span><br><span class="line"># print(df[(df[&#39;close&#39;] &lt; 10.0) &amp; (df[&#39;symbol&#39;] &#x3D;&#x3D; &#39;BTCUSD&#39;)])  # 两个条件，或者的话就是|</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>量化交易</tag>
        <tag>pandas</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas：对缺失值处理</title>
    <url>/2020/ck50s53gp00014os0h29w3bin/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"># 读入数据</span><br><span class="line"># path &#x3D; r&#39;C:\Users\Administrator\Desktop\1day数据.csv&#39;  # 加入r 使保留原始</span><br><span class="line">path &#x3D; r&#39;C:\Users\Administrator\Desktop\1min数据.csv&#39;  # 加入r 使保留原始</span><br><span class="line">df &#x3D; pd.read_csv(filepath_or_buffer&#x3D;path, index_col&#x3D;[&#39;candle_begin_time_GMT8&#39;])</span><br><span class="line">pd.set_option(&#39;expand_frame_repr&#39;, False)  # 当列太多时不换行</span><br><span class="line"></span><br><span class="line"># 缺失值处理：原始数据中存在缺失值，如何处理？</span><br><span class="line"></span><br><span class="line"># 创建缺失值</span><br><span class="line">index &#x3D; df[df[&#39;close&#39;]&gt; 7372].index #  如果把candle_begin_time_GMT8作为index  似乎不能把它作为列来筛选？</span><br><span class="line">df.loc[index, &#39;star&#39;] &#x3D; df[&#39;close&#39;] # 创建一列叫star 如果close&gt;7372 那么star的值为close，否则Nan</span><br><span class="line"># print(df)</span><br><span class="line"></span><br><span class="line"># 删除缺失值</span><br><span class="line"># print(df.dropna(how&#x3D;&#39;any&#39;))  # 将带有空值的行删除。how&#x3D;&#39;any&#39;意味着，该行中只要有一个空值，就会删除，尽管该行中别的数据有值</span><br><span class="line"># print(df.dropna(subset&#x3D;[&#39;star&#39;, &#39;close&#39;], how&#x3D;&#39;all&#39;))  # subset参数指定在特定的列中判断空值。</span><br><span class="line"># all代表全部为空，才会删除该行；any只要一个为空，就删除该行。</span><br><span class="line"></span><br><span class="line"># 补全缺失值</span><br><span class="line"># print(df.fillna(value&#x3D;0))  # 直接将缺失值赋值为固定的值</span><br><span class="line"># df[&#39;star&#39;].fillna(value&#x3D;df[&#39;close&#39;], inplace&#x3D;True)  # 直接将缺失值赋值其他列的数据</span><br><span class="line"># print(df)</span><br><span class="line"># print(df.fillna(method&#x3D;&#39;ffill&#39;))  # 向上寻找最近的一个非空值，以该值来填充缺失的位置，全称forward fill，非常有用</span><br><span class="line"># print(df.fillna(method&#x3D;&#39;bfill&#39;))  # 向下寻找最近的一个非空值，以该值来填充确实的位置，全称backward fill</span><br><span class="line"></span><br><span class="line"># 找出缺失值 #还是输出n*n表格，只不过数据换成True &#x2F; False</span><br><span class="line"># print(df.notnull())  # 判断是否为空值，反向函数为isnull()</span><br><span class="line"># print(df[df[&#39;star&#39;].notnull()])  # 将&#39;star&#39;列为空的行输出</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>量化交易</tag>
        <tag>pandas</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas：排序、合并、去重、时间</title>
    <url>/2020/ck50s53gs00024os0gy339ulm/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 排序函数</span><br><span class="line"># print(df.sort_values(by&#x3D;[&#39;candle_begin_time_GMT8&#39;], ascending&#x3D;0))  # by参数指定按照什么进行排序，acsending参数指定是顺序还是逆序，1顺序，0逆序</span><br><span class="line"># print(df.sort_values(by&#x3D;[&#39;symbol&#39;, &#39;candle_begin_time_GMT8&#39;], ascending&#x3D;[0, 0]))  # 按照多列进行排序  symbolA----Z  如果A对应多组时间数据 数据按从小到大排列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 两个df上下合并操作，append操作</span><br><span class="line"># df1 &#x3D; df.iloc[0:10][[&#39;candle_begin_time_GMT8&#39;, &#39;open&#39;, &#39;close&#39;, &#39;volume&#39;]] #行取0-15 列取4列</span><br><span class="line"># print(df1)</span><br><span class="line"># df2 &#x3D; df.iloc[5:15][[&#39;candle_begin_time_GMT8&#39;, &#39;open&#39;, &#39;close&#39;, &#39;volume&#39;]] #行取5-15 列取4列</span><br><span class="line"># print(df2)</span><br><span class="line"># print(df1.append(df2))  # append操作，将df1和df2上下拼接起来。注意观察拼接之后的index。哇，index可以重复（不唯一）</span><br><span class="line"># df3 &#x3D; df1.append(df2, ignore_index&#x3D;True)  # ignore_index参数，用户重新确定index 系统自动给了0-19</span><br><span class="line"># print(df3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对数据进行去重</span><br><span class="line"># df3中有重复的行数，我们如何将重复的行数去除？</span><br><span class="line"># df3.drop_duplicates(</span><br><span class="line">#     subset&#x3D;[&#39;candle_begin_time&#39;, &#39;symbol&#39;],  # subset参数用来指定根据哪类类数据来判断是否重复。若不指定，则用全部列的数据来判断是否重复</span><br><span class="line">#     keep&#x3D;&#39;first&#39;,  # 在去除重复值的时候，我们是保留上面一行还是下面一行？first保留上面一行，last保留下面一行，False就是一行都不保留</span><br><span class="line">#     inplace&#x3D;True</span><br><span class="line"># )</span><br><span class="line"># print(df3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 其他常用重要函数</span><br><span class="line"># df.reset_index(inplace&#x3D;True, drop&#x3D;False)  # 重置index，原始的index变成一列，新index 0-1-2-3 ……</span><br><span class="line"># print(df.rename(columns&#x3D;&#123;&#39;close&#39;: &#39;收盘价&#39;, &#39;open&#39;: &#39;开盘价&#39;&#125;))  # rename函数给变量修改名字。使用dict将要修改的名字传给columns参数</span><br><span class="line"># print(df.empty)  # 判断一个df是不是为空，此处输出不为空</span><br><span class="line"># print(pd.DataFrame().empty)  # pd.DataFrame()创建一个空的DataFrame，此处输出为空</span><br><span class="line"># print(df.T)  # 将数据转置，行变成列，很有用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># df中，字符串处理</span><br><span class="line"># print(df[&#39;symbol&#39;])</span><br><span class="line"># print(&#39;BTCUSD&#39;[:3]) # 输出BTC</span><br><span class="line"># print(df[&#39;symbol&#39;].str[:3])  # .str函数表示我要进行str操作</span><br><span class="line"># print(df[&#39;symbol&#39;].str.upper())  # 加上str之后可以使用常见的字符串函数对整列进行操作</span><br><span class="line"># print(df[&#39;symbol&#39;].str.lower())</span><br><span class="line"># print(df[&#39;symbol&#39;].str.len())  # 计算字符串的长度,length</span><br><span class="line"># df[&#39;symbol&#39;].str.strip()  # strip操作，把字符串两边的空格去掉</span><br><span class="line"># print(df[&#39;symbol&#39;])</span><br><span class="line"># print(df[&#39;symbol&#39;].str.contains(&#39;AID&#39;))  # 判断字符串中是否包含某些特定字符</span><br><span class="line"># print(df[&#39;symbol&#39;].str.replace(&#39;AID&#39;, &#39;AVT&#39;))  # 进行替换，将sz替换成sh</span><br><span class="line"># # 更多字符串函数：http:&#x2F;&#x2F;pandas.pydata.org&#x2F;pandas-docs&#x2F;stable&#x2F;text.html#method-summary</span><br><span class="line"></span><br><span class="line"># 时间处理</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;])</span><br><span class="line"># print(df.at[0, &#39;candle_begin_time&#39;])</span><br><span class="line"># print(type(df.at[0, &#39;candle_begin_time&#39;])) # 看是string还是date型</span><br><span class="line"></span><br><span class="line"># df[&#39;candle_begin_time&#39;] &#x3D; pd.to_datetime(df[&#39;candle_begin_time&#39;])  # 将日期由string改为date</span><br><span class="line"># print(df.at[0, &#39;candle_begin_time&#39;])</span><br><span class="line"># print(type(df.at[0, &#39;candle_begin_time&#39;]))</span><br><span class="line"></span><br><span class="line"># print(pd.to_datetime(&#39;1999年1月11日&#39;))  # pd.to_datetime函数：将字符串转变为时间变量</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;])</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;].dt.year)  # 输出这个日期的年份。相应的month是月份，day是天数，还有hour, minute, second</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;].dt.week)  # 这一天是一年当中的第几周</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;].dt.dayofyear)  # 这一天是一年当中的第几天</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;].dt.dayofweek)  # 这一天是这一周当中的第几天，0代表星期一</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;].dt.weekday)  # 和上面函数相同，更加常用</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;].dt.weekday_name)  # 和上面函数相同，返回的是星期几的英文，用于报表的制作。</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;].dt.days_in_month)  # 这一天所在月份有多少天</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;].dt.is_month_start)  # 这一天是否是该月的开头，是否存在is_month_end？</span><br><span class="line"># print(df[&#39;candle_begin_time&#39;] + pd.Timedelta(hours&#x3D;1))  # 增加一天，Timedelta用于表示时间差数据，[weeks, days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds]</span><br><span class="line"># print((df[&#39;candle_begin_time&#39;] + pd.Timedelta(days&#x3D;1)) - df[&#39;candle_begin_time&#39;])  # 增加一天然后再减去今天的日期</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>量化交易</tag>
        <tag>pandas</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas：输出显示的设置，输出df整体的信息</title>
    <url>/2020/ck50s53h600064os0ans2cxg7/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">#读入数据</span><br><span class="line">path &#x3D; r&#39;C:\Users\Administrator\Desktop\1day数据.csv&#39;  # 加入r 使保留原始</span><br><span class="line">df &#x3D; pd.read_csv(filepath_or_buffer&#x3D;path, index_col&#x3D;[&#39;candle_begin_time_GMT8&#39;])</span><br><span class="line"></span><br><span class="line"># 对print出的数据格式进行修正</span><br><span class="line"># pd.set_option(&#39;expand_frame_repr&#39;, False)  # 当列太多时不换行</span><br><span class="line"># pd.set_option(&#39;max_colwidth&#39;, 1)  # 设定每一列的最大宽度，恢复原设置的方法，pd.reset_option(&#39;max_colwidth&#39;)</span><br><span class="line"># pd.set_option(&quot;display.max_rows&quot;, 100)  # 设定显示最大的行数</span><br><span class="line"># pd.set_option(&#39;precision&#39;, 6)  # 浮点数的精度</span><br><span class="line"># print(df.head())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 看数据:datafram的整体情况</span><br><span class="line"># print(df.shape)  # 输出dataframe有多少行、多少列。  输出的是元组（）：（200,5）</span><br><span class="line"># print(df.shape[0])  # 取行数量，相应的列数量就是df.shape[1]  ; 元组的第一个元素：200   &#x3D;&#x3D; 说明有200行</span><br><span class="line"># print(df.columns)  # 顺序输出每一列的名字，演示如何for语句遍历。 #Index([&#39;open&#39;, &#39;high&#39;, &#39;low&#39;, &#39;close&#39;, &#39;volume&#39;], dtype&#x3D;&#39;object&#39;)</span><br><span class="line">for colum in df.columns:</span><br><span class="line">    print(colum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># print(df.index)  # 顺序输出每一行的名字，可以for语句遍历。</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Index([&#39;2019-06-14&#39;, &#39;2019-06-15&#39;, &#39;2019-06-16&#39;, &#39;2019-06-17&#39;, &#39;2019-06-18&#39;,</span><br><span class="line">       &#39;2019-06-19&#39;, &#39;2019-06-20&#39;, &#39;2019-06-21&#39;, &#39;2019-06-22&#39;, &#39;2019-06-23&#39;,</span><br><span class="line">       ...</span><br><span class="line">       &#39;2019-12-21&#39;, &#39;2019-12-22&#39;, &#39;2019-12-23&#39;, &#39;2019-12-24&#39;, &#39;2019-12-25&#39;,</span><br><span class="line">       &#39;2019-12-26&#39;, &#39;2019-12-27&#39;, &#39;2019-12-28&#39;, &#39;2019-12-29&#39;, &#39;2019-12-30&#39;],</span><br><span class="line">      dtype&#x3D;&#39;object&#39;, name&#x3D;&#39;candle_begin_time_GMT8&#39;, length&#x3D;200)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># print(df.dtypes)  # 该方法输出每一列变量类型。 数据每一列的类型不一样，比如数字、字符串、日期等</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">open      float64</span><br><span class="line">high      float64</span><br><span class="line">low       float64</span><br><span class="line">close     float64</span><br><span class="line">volume    float64</span><br><span class="line">dtype: object</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># print(df.head(3))  # 看前3行的数据，默认是5。与自然语言很接近</span><br><span class="line"># print(df.tail(3))  # 看最后3行的数据，默认是5。</span><br><span class="line"># print(df.sample(n&#x3D;3))  # 随机抽取3行，想要去固定比例的话，可以用frac参数 frc&#x3D;0.5 找出50%的行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># print(df.describe())  # 非常方便的函数，对每一列数据有直观感受；只会对数字类型的列有效</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">               open          high           low         close         volume</span><br><span class="line">count    200.000000    200.000000    200.000000    200.000000     200.000000</span><br><span class="line">mean    9282.277500   9535.187500   9015.039000   9278.158500   39334.125210</span><br><span class="line">std     1473.668477   1569.883295   1384.061178   1477.698135   31189.826968</span><br><span class="line">min     6696.800000   6863.500000   6434.400000   6696.400000    7236.585667</span><br><span class="line">25%     8069.025000   8229.325000   7867.275000   8056.100000   17183.930891</span><br><span class="line">50%     9354.850000   9558.850000   9119.500000   9354.800000   28504.698180</span><br><span class="line">75%    10391.325000  10632.000000  10079.000000  10391.300000   45619.843611</span><br><span class="line">max    12889.900000  13971.400000  12100.000000  12887.400000  150042.414757</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>量化交易</tag>
        <tag>pandas</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2019/about/</url>
    <content><![CDATA[<h4 id="How-are-you-doing？Thank-you-for-visiting-my-blog"><a href="#How-are-you-doing？Thank-you-for-visiting-my-blog" class="headerlink" title="How are you doing？Thank you for visiting my blog."></a>How are you doing？Thank you for visiting my blog.</h4><h4 id="I-am-Bijingrui，majoring-in-computer-science"><a href="#I-am-Bijingrui，majoring-in-computer-science" class="headerlink" title="I am Bijingrui，majoring in computer science."></a>I am Bijingrui，majoring in computer science.</h4><h4 id="I-want-to-record-something-here"><a href="#I-want-to-record-something-here" class="headerlink" title="I want to record something here!"></a>I want to record something here!</h4><hr>
<h4 id="wechat-：-bijingrui1997"><a href="#wechat-：-bijingrui1997" class="headerlink" title="wechat ： bijingrui1997"></a>wechat ： bijingrui1997</h4><h4 id="QQ：-80661059"><a href="#QQ：-80661059" class="headerlink" title="QQ： 80661059"></a>QQ： 80661059</h4><h4 id="github：https-github-com-bijingrui1997"><a href="#github：https-github-com-bijingrui1997" class="headerlink" title="github：https://github.com/bijingrui1997"></a>github：<a href="https://github.com/bijingrui1997" target="_blank" rel="noopener">https://github.com/bijingrui1997</a></h4>]]></content>
  </entry>
</search>
